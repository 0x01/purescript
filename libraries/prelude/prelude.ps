id :: forall a. a -> a
id = \x -> x

flip :: forall a b c. (a -> b -> c) -> b -> a -> c
flip = \f -> \b -> \a -> f a b

const :: forall a b. a -> b -> a
const = \a -> \b -> a

(|>) :: forall a b c. (a -> b) -> (b -> c) -> a -> c
(|>) = \f -> \g -> \a -> g (f a)

(<|) :: forall a b c. (b -> c) -> (a -> b) -> a -> c
(<|) = flip (|>)

-- Maybe

data Maybe a = Nothing | Just a

maybe :: forall a b. b -> (a -> b) -> Maybe a -> b
maybe = \b -> \f -> \m -> case m of 
  Nothing -> b
  Just a -> f a

fromMaybe :: forall a. a -> Maybe a -> a
fromMaybe = \a -> maybe a id

bindMaybe :: forall a b. Maybe a -> (a -> Maybe b) -> Maybe b
bindMaybe = \m -> \f -> maybe Nothing f m

-- Either

data Either a b = Left a | Right b

either :: forall a b c. (a -> c) -> (b -> c) -> Either a b -> c
either = \f -> \g -> \e -> case e of
  Left a -> f a
  Right b -> g b 

bindEither :: forall e a b. Either e a -> (a -> Either e b) -> Either e b
bindEither = either (\e -> \_ -> Left e) (\a -> \f -> f a) 

-- Arrays

head :: forall a. [a] -> a
head = \xs -> case xs of
  [x:_] -> x

headSafe :: forall a. [a] -> Maybe a
headSafe = \xs -> case xs of 
  [x:_] -> Just x
  _ -> Nothing

tail :: forall a. [a] -> [a]
tail = \xs -> case xs of
  [_:xs] -> xs

tailSafe :: forall a. [a] -> Maybe [a]
tailSafe = \xs -> case xs of
  [_:xs] -> Just xs
  _ -> Nothing

extern map :: forall a b. (a -> b) -> [a] -> [b]

foldr :: forall a b. (a -> b -> a) -> a -> [b] -> a
foldr = \f -> \a -> \bs -> case bs of
  [b:bs] -> f (foldr f a bs) b
  [] -> a

foldl :: forall a b. (a -> b -> b) -> b -> [a] -> b
foldl = \f -> \b -> \as -> do
  var result = b
  foreach a in as:
    result = f a result
  return result

extern length :: forall a. [a] -> Number

extern indexOf :: forall a. [a] -> a -> Number

extern lastIndexOf :: forall a. [a] -> a -> Number

extern concat :: forall a. [a] -> [a] -> [a]

extern join :: [String] -> String

extern joinWith :: [String] -> String -> String

extern push :: forall a. [a] -> a -> [a]

extern reverse :: forall a. [a] -> [a]

extern shift :: forall a. [a] -> [a]

extern slice :: forall a. Number -> Number -> [a] -> [a]

extern sort :: forall a. [a] -> [a]

extern splice :: forall a. Number -> Number -> [a] -> [a] -> [a]

cons :: forall a. a -> [a] -> [a]
cons = \a -> concat([a])

concatMap :: forall a b. [a] -> (a -> [b]) -> [b]
concatMap = \as -> \f -> do
  var result = []
  foreach a in as:
    result = result `concat` f a
  return result

extern filter :: forall a. [a] -> (a -> Boolean) -> [a]

null :: forall a. [a] -> Boolean
null = \as -> case as of
  [] -> true
  _ -> false

range :: Number -> Number -> [Number]
range = \lo -> \hi -> do
  var ns = []
  for n <- lo until hi:
    ns = push ns n
  return ns

zipWith :: forall a b c. (a -> b -> c) -> [a] -> [b] -> [c]
zipWith = \f -> \as -> \bs -> case { as: as, bs: bs } of
  { as = [a:as1], bs = [b:bs1] } -> cons (f a b) (zipWith f as1 bs1)
  _ -> []

any :: forall a. (a -> Boolean) -> [a] -> Boolean
any = \p -> \as -> do
  for i <- 0 until length as:
    if p as[i]:
      return true
  return false

all :: forall a. (a -> Boolean) -> [a] -> Boolean
all = \p -> \as -> do
  for i <- 0 until length as:
    if !(p as[i]):
      return false
  return true

-- Pairs

type Tuple a b = { fst :: a ; snd :: b }

curry :: forall a b c. (Tuple a b -> c) -> a -> b -> c
curry = \f -> \a -> \b -> f { fst: a, snd: b }

uncurry :: forall a b c. (a -> b -> c) -> Tuple a b -> c
uncurry = \f -> \t -> f t.fst t.snd

tuple :: forall a b. a -> b -> Tuple a b
tuple = curry id

zip :: forall a b. [a] -> [b] -> [Tuple a b]
zip = zipWith tuple

unzip :: forall a b. [Tuple a b] -> Tuple [a] [b]
unzip = \ts -> case ts of
  [t:ts1] -> case unzip ts1 of
    { fst = as, snd = bs } -> tuple (cons t.fst as) (cons t.snd bs)
  [] -> tuple [] []

-- Strings

extern lengthS :: String -> Number

extern charAt :: Number -> String -> String

extern indexOfS :: String -> String -> Number

extern lastIndexOfS :: String -> String -> Number

extern localeCompare :: String -> String -> Number

extern replace :: String -> String -> String -> String

extern sliceS :: Number -> Number -> String -> String

extern split :: String -> String -> [String]

extern substr :: Number -> Number -> String -> String

extern substring :: Number -> Number -> String -> String

extern toLower :: String -> String

extern toUpper :: String -> String

extern trim :: String -> String

-- Regex

extern data Regex :: *

extern regex :: String -> String -> Regex

extern test :: Regex -> String -> Boolean

extern match :: Regex -> String -> [String]

extern replaceR :: Regex -> String -> String -> String

extern search :: Regex -> String -> Number

-- Globals

extern nan :: Number

extern infinity :: Number

extern toExponential :: Number -> String

extern toFixed :: Number -> Number -> String

extern toPrecision :: Number -> Number -> String

extern numberToString :: Number -> String

extern isNaN :: Number -> Boolean

extern isFinite :: Number -> Boolean

extern parseFloat :: String -> Number

extern parseInt :: String -> Number

extern encodeURIComponent :: String -> String

extern decodeURIComponent :: String -> String

extern encodeURI :: String -> String

extern decodeURI :: String -> String

-- Math

type Math = 
  { abs :: Number -> Number
  ; acos :: Number -> Number
  ; asin :: Number -> Number
  ; atan :: Number -> Number
  ; atan2 :: (Number, Number) -> Number
  ; aceil :: Number -> Number
  ; cos :: Number -> Number
  ; exp :: Number -> Number
  ; floor :: Number -> Number
  ; log :: Number -> Number
  ; max :: (Number, Number) -> Number
  ; pow :: (Number, Number) -> Number
  ; random :: () -> Number
  ; round :: Number -> Number
  ; sin :: Number -> Number
  ; sqrt :: Number -> Number
  ; tan :: Number -> Number
  }

extern math :: Math

