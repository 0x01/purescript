type Monad m = 
  { ret :: forall a. (a) -> m a
  ; bind :: forall a b. (m a) -> ((a) -> m b) -> m b
  }

data List a = Nil | Cons { head :: a; tail :: List a }

replicateM :: forall m a. ((Number, Monad m, m a) -> m (List a))
replicateM = \n, m, x -> case n of 
  { 0 -> (m.ret)(Nil)
  ; n -> (m.bind)(x)(\a -> (m.bind)(replicateM(n - 1, m, x))(\as -> (m.ret)(Cons({ head: a, tail: as }))))
  }
